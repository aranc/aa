#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\date{}
\usepackage{tikz}
\usepackage{xcolor}
\hypersetup{
    colorlinks,
    linkcolor={black!50!black},
    citecolor={blue!50!black},
    urlcolor={blue!80!black}
}
\usepackage{culmus}
\def\L{\protect\pL}
\usepackage{minted}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref section
\pdf_pdfusetitle false
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
HW4
\end_layout

\begin_layout Author
Aran Carmon <aran.carmon@gmail.com> 038847588
\end_layout

\begin_layout Standard
1.
\end_layout

\begin_layout Standard
a.
 To construct 
\begin_inset Formula $c_{1}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula $c_{1}\leftarrow1\ll b$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $i\leftarrow0$
\end_inset


\end_layout

\begin_layout Plain Layout
for 
\begin_inset Formula $\log_{2}2k$
\end_inset

 times:
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $t\leftarrow c_{1}\ll\left(\left(b+1\right)\ll i\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $c_{1}\leftarrow c_{1}|\,t$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $i\leftarrow i+1$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
At each step, we duplicate the current string of 
\begin_inset Formula $c_{1}$
\end_inset

.
 
\end_layout

\begin_layout Standard
This only works for 
\begin_inset Formula $k$
\end_inset

 values that are a power of 
\begin_inset Formula $2$
\end_inset

.
 Other cases can use split 
\begin_inset Formula $k$
\end_inset

 according to its bits and use the above as a subroutine.
\end_layout

\begin_layout Standard
Or alternatively, if we have 
\begin_inset Formula $w$
\end_inset

 big enough, we can use a bigger 
\begin_inset Formula $k$
\end_inset

 that is a power of 
\begin_inset Formula $2$
\end_inset

, and then use a mask to remove the unwanted bits.
 (Mask is simply 
\begin_inset Formula $2^{\text{num-bits}}-1$
\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
To construct 
\begin_inset Formula $c_{2}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset Formula $c_{1}\leftarrow c_{1}(k,b)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $c_{2}\leftarrow0$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula $i\leftarrow0$
\end_inset


\end_layout

\begin_layout Plain Layout
for 
\begin_inset Formula $\log_{2}2k$
\end_inset

 times:
\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $t\leftarrow c_{2}\ll\left(\left(b+1\right)\ll i\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $c_{2}\leftarrow c_{2}|\,t$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $t\leftarrow c_{1}\ll\left(\left(\left(b+1\right)\ll i\right)-b+i\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $t\leftarrow t\&\left(\left(1\ll\left(\left(b+1\right)\ll\left(i+1\right)\right)\right)-1\right)$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $c_{2}\leftarrow c_{2}|\,t$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Formula $i\leftarrow i+1$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Similarly to how we constructed 
\begin_inset Formula $c_{1}$
\end_inset

, this time at each step we turn on the relevant bit.
\end_layout

\begin_layout Standard
Note: The 
\begin_inset Formula $\&$
\end_inset

 symbol is bit-wise 
\begin_inset Quotes eld
\end_inset

and
\begin_inset Quotes erd
\end_inset

.
 The 
\begin_inset Formula $|$
\end_inset

 symbol is bit-wise 
\begin_inset Quotes eld
\end_inset

or
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
b.
 Using geometric series expansion:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{align*}
c_{1}(k,b) & =2^{b+1}+2^{b+1}2^{b+1}+2^{b+1}\left(2^{b+1}\right)^{2}+...+2^{b+1}\left(2^{b+1}\right)^{2k-1}\\
 & =2^{b+1}\left(1+2^{b+1}+...+\left(2^{b+1}\right)^{2k-1}\right)\\
 & =2^{b+1}\frac{1-\left(2^{b+1}\right)^{2k}}{1-2^{b+1}}
\end{align*}

\end_inset


\end_layout

\begin_layout Standard
So 
\begin_inset Formula $C_{1}(k,b)=\left(\left(1-\left(1\ll\left(\left(b+1\right)*2k\right)\right)\right)/\left(1-\left(1\ll\left(b+1\right)\right)\right)\right)\ll b$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
c.
 
\begin_inset Formula $C_{2}(k,b)=\left(\left(\left(c_{1}(k,b)\gg b\right)*\left(c_{1}(k,b)\gg b\right)\right)\ll\left(b+1\right)\right)\&\left(\left(1\ll\left(2k*\left(b+1\right)\right)\right)-1\right)$
\end_inset


\end_layout

\begin_layout Standard
This is simply taking 
\begin_inset Formula $C_{1}$
\end_inset

 shifted, multiplying it by itself, shifting, and applying a mask.
\end_layout

\begin_layout Standard
This is true since 
\begin_inset Formula $C_{2}$
\end_inset

 is the repeated addition of several shifted copies of 
\begin_inset Formula $\left(C_{1}\gg b\right)$
\end_inset

.
\end_layout

\begin_layout Standard
The mask in the end is to remove excess bits.
\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
2.
 Need to use it that they all enter a single word.
\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
We use the packed sorting algorithm shown in class, with 
\begin_inset Formula $b=\frac{w}{\log n\log\log n}$
\end_inset

 and 
\begin_inset Formula $k=\theta\left(\frac{w}{b}\right)=\theta\left(\log n\log\log n\right)$
\end_inset

.
\end_layout

\begin_layout Standard
The merging part of the algorithm takes 
\begin_inset Formula $O(n\log n\frac{\log k}{k})=O(n\frac{\log\left(\log n\log\log n\right)}{\log\log n})\le O(n\frac{\log\left(\log^{2}n\right)}{\log\log n})=O(n\frac{2\log\log n}{\log\log n})=O(n)$
\end_inset

.
 
\end_layout

\begin_layout Standard
The preliminary sorting step also takes 
\begin_inset Formula $O(\frac{n}{k}k)=O(n),$
\end_inset

 Since ...
 
\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
3.
\end_layout

\begin_layout Standard
a.
 The algorithm is dominated by the range-reduction recursion step, storing
 
\begin_inset Formula $n$
\end_inset

 numbers, for 
\begin_inset Formula $\log\log n$
\end_inset

 steps.
 So the space complexity is 
\begin_inset Formula $O(n\log\log n)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
b.
 At each recursion step, the number of bits per key is halved, so instead
 of using 
\begin_inset Formula $O(\sum_{i=1}^{\log\log n}n)$
\end_inset

 space, we can pack the smaller numbers tighter in memory.
 e.g.
 after one halving, we will pack 2 numbers inside 1 word on the stack.
 After 
\begin_inset Formula $i$
\end_inset

 halvings, we will pack 
\begin_inset Formula $2^{i}$
\end_inset

 numbers inside 1 word.
 This will reduce the space consumption to 
\begin_inset Formula $O(\sum_{i=0}^{\log\log n}\frac{n}{2^{i}})\le O(\sum_{i=0}^{\infty}\frac{n}{2^{i}})=O(n)$
\end_inset

.
 
\end_layout

\begin_layout Standard
The running time is left unharmed, since we only trivially modified the
 convention of how we pass arguments along the stack.
\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
4.
 We break each key to 
\begin_inset Formula $r$
\end_inset

 pieces of at most 
\begin_inset Formula $\left\lceil \frac{w}{r}\right\rceil $
\end_inset

 bits each.
 Each key is now a string of smaller keys.
 By using the forward-radix-sort algorithm, we can sort these strings in
 
\begin_inset Formula $O(N+n\log\log n)$
\end_inset

 time.
 Since all smaller keys are important, 
\begin_inset Formula $N=nr$
\end_inset

, and the time complexity is 
\begin_inset Formula $O(nr+n\log\log n)$
\end_inset

 which is 
\begin_inset Formula $O(n\log\log n)$
\end_inset

 for a constant 
\begin_inset Formula $r$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
Now for the space complexity.
 The original deterministic algorithm used 
\begin_inset Formula $O(n+2^{w})$
\end_inset

 space (Instead of hash tables, we use big arrays).
 Since we now sort smaller keys, of length 
\begin_inset Formula $\frac{w}{r}$
\end_inset

 bits, we only use 
\begin_inset Formula $O(n+2^{\frac{w}{r}})$
\end_inset

 space.
\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
5.
\end_layout

\begin_layout Standard
a.
\end_layout

\begin_layout Standard
\begin_inset Formula $\phantom{A}$
\end_inset


\end_layout

\begin_layout Standard
b.
 Suppose 
\begin_inset Formula $nq\ge n^{2}$
\end_inset

.
 We chose 
\begin_inset Formula $q$
\end_inset

 such that 
\begin_inset Formula $q=\theta\left(\frac{w}{\log^{2}n\log\log n}\right)$
\end_inset

, So 
\begin_inset Formula $\theta\left(\frac{w}{\log^{2}n\log\log n}\right)\ge n$
\end_inset

, and 
\begin_inset Formula $w\ge\theta\left(n\log^{2}n\log\log n\right)$
\end_inset

.
\end_layout

\begin_layout Standard
And...
\end_layout

\begin_layout Standard
(consider using andersson-nilsson to sort quicker)
\end_layout

\end_body
\end_document
